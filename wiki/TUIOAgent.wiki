#summary TuioAgent
#sidebar TerseHandlingSideBar

|| Requirements: [https://processing.org/download/ Processing >= 2.x], and the [http://otrolado.info/tersehandling.zip TerseHandling library] (source code found under the "*examples*" section of the library package ||

We are happy to offer this new example in collaboration with [http://edumo.net/wp/ Edumo], whom we are very grateful. This example additionally requires:

|| Extra-requirements: 1. [http://www.tuio.org/?processing TUIO Processing client] and, 2. [https://code.google.com/p/tuiodroid/ tuiodroid] (if have an Android enable device) and/or a [http://www.tuio.org/?software tuiosimulator] (if you don't)||

<wiki:toc max_depth="1" />

This example shows how to plug-in, and setup a touch device allowing to select and control the circles in our [ActionDrivenCallback  previous example]. To make it more interesting, we will allow concurrent finger control of the circles, so that various circles can be manipulated with different fingers at the same time. We will also keep the mouse agent intact, so that we can also manipulate the circles as we have done it with the mouse so far. This examples requires the [http://www.tuio.org/?processing TUIO Processing client] and, either a TUIO tracker such as [https://code.google.com/p/tuiodroid/ android's] (if have an Android enable device) and/or a [http://www.tuio.org/?software TUIO simulator] (if you don't), to send TUIO _finger_ messages from.

To implement this setup we will:

  # Implement a TUIOAgent.
  # Register the tuioAgent by updating our scene setup.

= Implementing a TUIO Agent =

We declare our TUIOAgent in the same exact way we've done [ActionDrivenCallback previously] with our MouseAgent:

{{{
public class TUIOAgent extends GenericMotionAgent<GenericMotionProfile<MotionAction>, GenericClickProfile<ClickAction>> implements EventConstants
}}}


and we also declare a *[*Finger, circle tuples*]* `HashMap` to keep information about which circle is being selected/manipulated by which finger:

{{{
Map<Integer, Grabbable> grabMap = new HashMap<Integer, Grabbable>();
}}}

now, each time a finger starts interaction we just update our `grabMap`, invoking `updateGrabber(event)` first to see whether or not a circle was picked:

{{{
//this is the TUIO function telling us a new finger enters interaction:
public void addTuioCursor(TuioCursor tcur) {
    event = new GenericDOF2Event<MotionAction>(prevEvent, tcur.getScreenX(canvas.width), tcur.getScreenY(canvas.height), 
    0, 0);

    //so we just update the grabber in the agent pool:
    updateGrabber(event);
    Grabbable grabbable = this.trackedGrabber();

    //and if something gets catched, we update the hashMap:
    if (grabbable != null) {
      grabMap.put(tcur.getCursorID(), grabbable);
    }
  }
}}}

= Scene setup update =