#summary Tersehandling call back mechanism
#sidebar TerseHandlingSideBar

<wiki:toc max_depth="1" />

A simple callback mechanism is illustrated in the example `BoringClickAndDrag`, in which we:

  # Implement a simple `TerseHandling` Agent, which transforms [http://processing.org/reference/javadoc/core/processing/event/package-summary.html Processing mouse events] into `TerseHandling` events.
  # Implement an object grabber, define its behavior, and register it at the agent.
  # Handle agents and events calling `TerseHandler.handle()` in the main event loop.

=1. Implementing a simple `TerseHandling` Agent=

Every `TerseHandling` *Agent* holds a pool of input *grabbers*, i.e., high-level objects which can react to user input, only one of which may grabbed the agent at a given time (or none). So here we begin by implementing our first `TerseHandling` *Agent*, which will be responsible for:

  # Transforming *Processing* MouseEvents into `TerseHandling` DOF2Events.
  # Defining which `TerseHandling` event will update the grabber in the Agent pool.
  # Defining which `TerseHandling` event will actually trigger an action to be performed by the grabber (if there's one selected).

{{{
public class MouseAgent extends Agent {
  //Declare a DOF2Event (two degrees-of-freedom) and a ClickEvent TerseHandling events:
  DOF2Event event;

  public MouseAgent(TerseHandler scn, String n) {
    super(scn, n);
  }

  public void mouseEvent(processing.event.MouseEvent e) {
    // Convert the Processing mouse event into the DOF2Event just declared above
    event = new DOF2Event(e.getX(), e.getY());
    // A Processing mouse move event will update the agent grabber:
    if ( e.getAction() == processing.event.MouseEvent.MOVE )
      updateGrabber(event);
    // ... and a Processing mouse drag event will trigger an action,
    // provided that there's an object grabbing the Agent.
    // Note that it could have been the other way around,
    // i.e., a mouse move could have been perfectly used to trigger the action. Please refer to this discussion:
    // https://forum.processing.org/topic/proscene-rotate-camera-around-scene-center-according-to-2d-mouse-position
    if ( e.getAction() == processing.event.MouseEvent.DRAG )
      handle(event);
  }
}
}}}

=2. Implementing a simple object grabber=

{{{
public class GrabbableCircle extends AbstractGrabber {
  ...
  @Override
  public boolean checkIfGrabsInput(BaseEvent event) {
    if (event instanceof DOF2Event) {
      float x = ((DOF2Event)event).getX();
      float y = ((DOF2Event)event).getY();
      return(pow((x - center.x), 2) + pow((y - center.y), 2) <= pow(radius, 2));
    }      
    return false;
  }

  @Override
  public void performInteraction(BaseEvent event) {
    setColor();
    setPositionAndRadius();
  }
}}}

=3. Handling agents=

{{{
TerseHandler terseHandler;

void setup() {
  ...
  terseHandler = new TerseHandler();
  agent = new MouseAgent(terseHandler, "my_mouse");
  registerMethod("mouseEvent", agent);
  ...
}

void draw() {
  ...
  terseHandler.handle();
}
}}}